# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import cv2
from pupil_apriltags import Detector
import os
import json
import numpy as np
import pandas as pd
from scipy.spatial.transform import Rotation as Rom

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1356, 644)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.img_label = QtWidgets.QLabel(self.centralwidget)
        self.img_label.setGeometry(QtCore.QRect(10, 20, 640, 480))
        self.img_label.setText("")
        self.img_label.setObjectName("img_label")
        self.photo_button = QtWidgets.QPushButton(self.centralwidget)
        self.photo_button.setGeometry(QtCore.QRect(860, 80, 101, 23))
        self.photo_button.setObjectName("photo_button")
        self.rt_button = QtWidgets.QPushButton(self.centralwidget)
        self.rt_button.setGeometry(QtCore.QRect(850, 120, 121, 23))
        self.rt_button.setObjectName("rt_button")
        self.intrinsic_button = QtWidgets.QPushButton(self.centralwidget)
        self.intrinsic_button.setGeometry(QtCore.QRect(860, 160, 101, 23))
        self.intrinsic_button.setObjectName("intrinsic_button")
        self.matrix_button = QtWidgets.QPushButton(self.centralwidget)
        self.matrix_button.setGeometry(QtCore.QRect(850, 200, 121, 23))
        self.matrix_button.setObjectName("matrix_button")
        self.filename_label = QtWidgets.QLabel(self.centralwidget)
        self.filename_label.setGeometry(QtCore.QRect(10, 550, 57, 15))
        self.filename_label.setObjectName("filename_label")
        self.checkBox_tag_draw = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_tag_draw.setGeometry(QtCore.QRect(830, 250, 161, 21))
        self.checkBox_tag_draw.setObjectName("checkBox_tag_draw")
        self.checkBox_draw_from_file = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_draw_from_file.setGeometry(QtCore.QRect(830, 300, 161, 21))
        self.checkBox_draw_from_file.setObjectName("checkBox_draw_from_file")

        self.cloud_button = QtWidgets.QPushButton(self.centralwidget)
        self.cloud_button.setGeometry(QtCore.QRect(850, 350, 121, 23))
        self.cloud_button.setObjectName("cloud_button")

        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(860, 530, 80, 23))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(750, 530, 80, 23))
        self.pushButton_2.setObjectName("pushButton_2")

        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(960, 530, 80, 23))
        self.pushButton_3.setObjectName("pushButton_3")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1356, 20))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.add_functions()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.photo_button.setText(_translate("MainWindow", "папка с фото"))
        self.rt_button.setText(_translate("MainWindow", "папка с ртшками"))
        self.intrinsic_button.setText(_translate("MainWindow", "интринсики"))
        self.matrix_button.setText(_translate("MainWindow", "матрица детали"))
        self.filename_label.setText(_translate("MainWindow", "TextLabel"))
        self.checkBox_tag_draw.setText(_translate("MainWindow", "отрисовать по тегу"))
        self.checkBox_draw_from_file.setText(_translate("MainWindow", "отрисовать с нуля"))
        self.pushButton.setText(_translate("MainWindow", "next"))
        self.pushButton_2.setText(_translate("MainWindow", "previous"))
        self.pushButton_3.setText(_translate("MainWindow", "go"))
        self.cloud_button.setText(_translate("MainWindow", "cloud"))
    def add_functions(self):
        self.photo_button.clicked.connect(self.getDirectory_photo)
        self.rt_button.clicked.connect(self.getDirectory_rt)
        self.intrinsic_button.clicked.connect(self.getDirectory_intrinsic)
        self.matrix_button.clicked.connect(self.getDirectory_rtobject)
        self.pushButton_3.clicked.connect(self.go_button)
        self.pushButton.clicked.connect(self.next)
        self.cloud_button.clicked.connect(self.read_cloud_from_file)
    def getDirectory_photo(self):  # <-----
        self.photo_dir = QtWidgets.QFileDialog.getExistingDirectory(None, "Выбрать папку", ".")
        self.img_idx = 0
        self.max_idx = len(os.listdir(self.photo_dir))
        self.img_path = os.path.join(self.photo_dir, os.listdir(self.photo_dir)[self.img_idx])
        self.loadImage(self.img_path)
        print(self.photo_dir)

    def getDirectory_rt(self):  # <-----
        self.rt_dir = QtWidgets.QFileDialog.getExistingDirectory(None, "Выбрать папку", ".")
        self.rt_path = os.path.join(self.rt_dir, os.listdir(self.rt_dir)[self.img_idx])
        self.read_rt_from_json()
    
    def getDirectory_intrinsic(self):  # <-----
        self.intrinsic_path = QtWidgets.QFileDialog.getOpenFileName(None, "Выбрать файл", ".")[0]
        print(self.intrinsic_path)
        with open(self.intrinsic_path,"r") as js:
            data = json.load(js)
        self.intrinsics = data["camera"][0]["intrinsics"]
        self.camera_params = [self.intrinsics[0][0] , self.intrinsics[1][1],self.intrinsics[0][2],self.intrinsics[1][2]]
        self.intrinsics = np.array(self.intrinsics).reshape(3,3)
        print(self.intrinsics)

    def getDirectory_rtobject(self):  # <-----
        self.object_matrix_path = QtWidgets.QFileDialog.getOpenFileName(None, "Выбрать файл", ".")[0]
        with open(self.object_matrix_path,"r") as js:
            data = json.load(js)
        data = data[list(data.keys())[0]]
        data = data[list(data.keys())[0]]
        self.rt_to_object = np.array(data)
        print(self.rt_to_object)
        print(self.rt_to_object.shape)

    def loadImage(self, flname ):                  
        self.image = cv2.imread(flname)

    def next(self):
        self.img_idx += 1
        if self.max_idx == self.img_idx:
            self.img_idx = 0
        self.img_path = os.path.join(self.photo_dir, os.listdir(self.photo_dir)[self.img_idx])
        self.rt_path = os.path.join(self.rt_dir, os.listdir(self.rt_dir)[self.img_idx])
        self.read_rt_from_json()
        self.loadImage(self.img_path)
        self.go_button()

    def read_cloud_from_file(self):
        self.cloud_file = QtWidgets.QFileDialog.getOpenFileName(None, "Выбрать файл", ".")[0]
        with open(self.cloud_file) as json_file:
            data = json.load(json_file)
        points = data["points"]
        pd3 = []
        for p in points:
            pd3.append([-p[0] / 1000, p[1] / 1000, p[2] / 1000])
        self.cloud = pd3
        print(self.cloud)
    
    def draw_cloud(self,img, points, Rt):
        imgP = []
        for p in points:
            P = Rt.dot(np.hstack((p, 1.0)))
            pixel = (P / P[-1])[:-1]
            imgP.append(pixel)
        for p in imgP:
            cv2.circle(img, (int(p[0]), int(p[1])), 1, (255, 0, 0), -1)

    def read_rt_from_json(self):
        df = pd.read_csv(self.rt_path)
        rot = df['rotation'][0]
        t = df["translation"][0]
        rot = rot.replace("[","").replace("]","").split(" ")
        t = t.replace("[","").replace("]","").split(", ")
        

        t = [float(tt)/1000 for tt in t if tt !=""]
        R = [float(r) for r in rot if r !=""]
        t = np.array(t)
        R = Rom.from_euler("yxz",R,degrees=True)
        Rt = np.hstack((R.as_matrix(),t.reshape(3,1)))
        self.file_rt = Rt
        print(Rt)

    def draw_by_tag(self):
        detector = Detector(
            families="tag36h11",
            nthreads=1,
            quad_decimate=1.0,
            quad_sigma=0.0,
            refine_edges=1,
            decode_sharpening=0.25,
            debug=0,
        )
        self.img_to_show = self.image.copy()
        gray_rs_frame = cv2.cvtColor(self.img_to_show, cv2.COLOR_BGR2GRAY)
        result = detector.detect(
            img = gray_rs_frame,
            estimate_tag_pose=True,
            camera_params=self.camera_params,
            tag_size=0.0665,
        )
        for detect in result:
            if detect.tag_id == 2: 
                r = detect.pose_R
                t = detect.pose_t
                t = [tt[0] for tt in t]
                rt = np.hstack((r,np.array(t).reshape(3,1)))
                self.read_rt_from_json()
                m_rt = rt @ self.rt_to_object
                cloud = self.p2ds(self.intrinsics,self.cloud,m_rt)

                self.draw_p2ds(self.img_to_show, cloud)
    def draw_all(self):
        m_rt = self.file_rt 
        cloud = self.p2ds(self.intrinsics,self.cloud,m_rt)
        self.img_to_show = self.image.copy()
        self.draw_p2ds(self.img_to_show, cloud,r =2 ,color = (0,0,255))

        detector = Detector(
            families="tag36h11",
            nthreads=1,
            quad_decimate=1.0,
            quad_sigma=0.0,
            refine_edges=1,
            decode_sharpening=0.25,
            debug=0,
        )
        gray_rs_frame = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
        result = detector.detect(
            img = gray_rs_frame,
            estimate_tag_pose=True,
            camera_params=self.camera_params,
            tag_size=0.0665,
        )
        for detect in result:
            if detect.tag_id == 2: 
                r = detect.pose_R
                t = detect.pose_t
                t = [tt[0] for tt in t]
                rt = np.hstack((r,np.array(t).reshape(3,1)))
                self.read_rt_from_json()
                m_rt = rt @ self.rt_to_object
                cloud = self.p2ds(self.intrinsics,self.cloud,m_rt)

                self.draw_p2ds(self.img_to_show, cloud)

    def draw_from_file(self):
        m_rt = self.file_rt 
        self.img_to_show = self.image.copy()
        cloud = self.p2ds(self.intrinsics,self.cloud,m_rt)

        self.draw_p2ds(self.img_to_show, cloud,r =2 ,color = (0,0,255))

    def draw_p2ds(self,img, p2ds, r=1, color=(255, 0, 0)):

        for _, pt_2d in enumerate(p2ds):
            cv2.circle(img, (pt_2d[0], pt_2d[1]), r, color, -1)
            
    def project_p3d(self,p3d, K, cam_scale=1):
        p3d *= cam_scale
        p2d = np.dot(p3d, K.T)
        p2d_3 = p2d[:, 2]
        p2d_3[np.where(p2d_3 < 1e-8)] = 1.0
        p2d[:, 2] = p2d_3
        p2d = np.around((p2d[:, :2] / p2d[:, 2:])).astype(np.int32)
        return p2d
    def p2ds(self,intrinsics, model_points, Rt) -> list:

        points = model_points.copy()

        points += np.array([0.155, 0, 0])

        R = Rt[:, :3]
        t = Rt[:, 3]
        cloud = np.dot(points, R.T)
        cloud = np.add(cloud, t)

        return self.project_p3d(cloud, intrinsics)
    def go_button(self):
        if self.checkBox_tag_draw.checkState()!=0 and self.checkBox_draw_from_file.checkState() !=0:
            self.draw_all()
        elif self.checkBox_draw_from_file.checkState() !=0:
            self.draw_from_file()
        elif self.checkBox_tag_draw.checkState() != 0:
            self.draw_by_tag()
        else:
            self.img_to_show = self.image
        
        self.displayImage()

    def displayImage(self):
        self.img_to_show = cv2.resize(self.img_to_show,(640,480))
        
        qformat = QtGui.QImage.Format_Indexed8

        if len(self.img_to_show.shape) == 3:
            if (self.img_to_show.shape[2]) == 4:
                qformat = QtGui.QImage.Format_RGBA8888
            else:
                qformat = QtGui.QImage.Format_RGB888

                img = QtGui.QImage(self.img_to_show,
                             self.img_to_show.shape[1],
                             self.img_to_show.shape[0],
                             self.img_to_show.strides[0],
                             qformat)
                img = img.rgbSwapped()

                self.img_label.setPixmap(QtGui.QPixmap.fromImage(img))      # serPixmap <-> setPixmap
                self.img_label.setAlignment(QtCore.Qt.AlignHCenter    # qtCore    <-> QtCore
                                         | QtCore.Qt.AlignVCenter)
if __name__ == "__main__":
    import sys
    import os

    os.environ.pop("QT_QPA_PLATFORM_PLUGIN_PATH")
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)

    MainWindow.setWindowTitle("Оценка энергопотребления НП AltAI (демо)")
    MainWindow.show()
    sys.exit(app.exec_())
    